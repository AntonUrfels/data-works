1 + 1
class(1)
is.vector(1)
is.vector(1)
class(1)
is.vector("Hello IRRI")
class("Hello IRRI")
is.vector(1) # check whether this is a vector
class(1) # check what class this vector is
is.vector("Hello IRRI")
class("Hello IRRI")
is.vector(c(1,2))
c("HELLO IRRI", 1,2)
class(c("HELLO IRRI", 1,2))
is.vector(1) # check whether this is a vector
class(1) # check what class this vector is
is.vector("Hello IRRI")
class("Hello IRRI")
is.vector(c(1,2))
c("HELLO IRRI", 1,2)
class(c("HELLO IRRI", 1,2))
x <- c(1,2,3)
print(x)
yield_tha <- c(3.4,5.3,10.3)
survey <- data.frame( #here we ask to create a data frame. And assign it to survey
name = farmer_name,
yield = yield_tha, # Here we create a column name "yield" and request yield_tha as values
n = n_rate # the same for n_rate
)
farmer_name <- c("Hari","Virender","Anton")
yield_tha <- c(3.4,5.3,10.3)
n_rate <- c(30,50,100)
survey <- data.frame( #here we ask to create a data frame. And assign it to survey
name = farmer_name,
yield = yield_tha, # Here we create a column name "yield" and request yield_tha as values
n = n_rate # the same for n_rate
)
farmer_name <- c("Hari","Virender","Anton")
yield_tha <- c(3.4,5.3,10.3)
n_rate <- c(30,50,100)
survey <- data.frame( #here we ask to create a data frame. And assign it to survey
name = farmer_name,
yield = yield_tha, # Here we create a column name "yield" and request yield_tha as values
n = n_rate # the same for n_rate
)
survey #ask to print the object survey
farmer_name <- c("Hari","Virender","Anton")
yield_tha <- c(3.4,5.3,10.3)
n_rate <- c(30,50,100)
survey <- data.frame( #here we ask to create a data frame. And assign it to survey
name = farmer_name,
yield = yield_tha, # Here we create a column name "yield" and request yield_tha as values
n = n_rate # the same for n_rate
)
survey #ask to print the object survey
dim(survey)
colnames(survey)
survey[,3] # extract the entire last column
farmer_name[1] # get the first farmner name
farmer_name[2] # get the second farmer name
farmer_name[c(1,2)] # get both names
survey[1,1] #subset the first entry in the first column
survey[1,] #extract the entire first row
survey[,3] # extract the entire last column
survey[,"yield"]
survey$name #get the names column
survey$name #get the names column
survey$yield / survey$n # calculate the n producitivty
plot(survey$yield~survey$n)
plot(survey$yield~survey$n,ylab = "Yield",xlab="N rate")
ggplot(data = survey)+ #start a ggplot and use survey for data input
geom_point(aes(x=n, y=yield))
library(ggplot2)
ggplot(data = survey)+ #start a ggplot and use survey for data input
geom_point(aes(x=n, y=yield))
library(ggplot2)
ggplot(data = survey)+ #start a ggplot and use survey for data input
geom_point(aes(x=n, y=yield,color=name)) #define aes(thetics), x axis, axis, color
library(ggplot2)
ggplot(data = survey)+ #start a ggplot and use survey for data input
geom_point(aes(x=n, y=yield,color=name))+ #define aes(thetics), x axis, axis, color
theme_classic() #use classic theme for cleaner plot
ggplot(data = survey)+ #start a ggplot and use survey for data input
geom_point(aes(x=n, y=yield,color=name))+ #define aes(thetics), x axis, axis, color
theme_classic()+ #use classic theme for cleaner plot
scale_x_continuous(name = "N rate") #adjust the x axis. Make it N rate.
library(ggplot2)
ggplot(data = survey)+ #start a ggplot and use survey for data input
geom_point(aes(x=n, y=yield,color=name))+ #define aes(thetics), x axis, axis, color
theme_classic()+ #use classic theme for cleaner plot
scale_x_continuous(name = "N rate") #adjust the x axis. Name it N rate.
fit <- lm(data = survey, formula = yield~n)
fit
plot(fit)
fit <- lm(data = survey, formula = yield~n)
fit
fit <- randomForest(x = survey, yield~.) # yield as function of all other variables
est)
library(randomForest)
fit <- randomForest(x = survey, yield~.) # yield as function of all other variables
fit <- ranger(x = survey, yield~.) # yield as function of all other variables
library(ranger)
library(ranger)
fit <- ranger(x = survey, yield~.) # yield as function of all other variables
fit <- ranger(data = survey, yield~.) # yield as function of all other variables
library(ranger)
fit <- ranger(data = survey, yield~.) # yield as function of all other variables
fit
plot(fit)
fit <- ranger(data = survey, yield~.,importance = "impurity") # yield as function of all other variables
fit
ranger
plot(fit)
importance(fit)
fit <- ranger(data = survey, yield~.,importance = "impurity") # yield as function of all other variables
fit
plot(importance(fit)
plot(importance(fit))
importance(fit)
fit
library(vip)
vip(fit)
?mean
farmer_name <- c("Hari","Virender","Anton")
yield_tha <- c(10.3,4,5.3,2.3)
n_rate <- c(30,50,100)
survey <- data.frame( #here we ask to create a data frame. And assign it to survey
name = farmer_name,
yield = yield_tha, # Here we create a column name "yield" and request yield_tha as values
n = n_rate # the same for n_rate
)
farmer_name <- c("Hari","Virender","Anton")
farmer_name <- c("Hari","Virender","Anton")
yield_tha <- c(10.3,5.3,2.3)
n_rate <- c(30,50,100)
survey <- data.frame( #here we ask to create a data frame. And assign it to survey
name = farmer_name,
yield = yield_tha, # Here we create a column name "yield" and request yield_tha as values
n = n_rate # the same for n_rate
)
survey #ask to print the object survey
dim(survey)
colnames(survey)
